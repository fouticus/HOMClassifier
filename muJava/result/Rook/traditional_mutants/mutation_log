AORB_1:34:java.util.ArrayList_legalMoves():horDirection[direction] * OffSet => horDirection[direction] / OffSet
AORB_2:34:java.util.ArrayList_legalMoves():horDirection[direction] * OffSet => horDirection[direction] % OffSet
AORB_3:34:java.util.ArrayList_legalMoves():horDirection[direction] * OffSet => horDirection[direction] + OffSet
AORB_4:34:java.util.ArrayList_legalMoves():horDirection[direction] * OffSet => horDirection[direction] - OffSet
AORB_5:34:java.util.ArrayList_legalMoves():this.getRow() + horDirection[direction] * OffSet => this.getRow() * (horDirection[direction] * OffSet)
AORB_6:34:java.util.ArrayList_legalMoves():this.getRow() + horDirection[direction] * OffSet => this.getRow() / (horDirection[direction] * OffSet)
AORB_7:34:java.util.ArrayList_legalMoves():this.getRow() + horDirection[direction] * OffSet => this.getRow() % (horDirection[direction] * OffSet)
AORB_8:34:java.util.ArrayList_legalMoves():this.getRow() + horDirection[direction] * OffSet => this.getRow() - horDirection[direction] * OffSet
AORB_9:35:java.util.ArrayList_legalMoves():verDirection[direction] * OffSet => verDirection[direction] / OffSet
AORB_10:35:java.util.ArrayList_legalMoves():verDirection[direction] * OffSet => verDirection[direction] % OffSet
AORB_11:35:java.util.ArrayList_legalMoves():verDirection[direction] * OffSet => verDirection[direction] + OffSet
AORB_12:35:java.util.ArrayList_legalMoves():verDirection[direction] * OffSet => verDirection[direction] - OffSet
AORB_13:35:java.util.ArrayList_legalMoves():this.getColumn() + verDirection[direction] * OffSet => this.getColumn() * (verDirection[direction] * OffSet)
AORB_14:35:java.util.ArrayList_legalMoves():this.getColumn() + verDirection[direction] * OffSet => this.getColumn() / (verDirection[direction] * OffSet)
AORB_15:35:java.util.ArrayList_legalMoves():this.getColumn() + verDirection[direction] * OffSet => this.getColumn() % (verDirection[direction] * OffSet)
AORB_16:35:java.util.ArrayList_legalMoves():this.getColumn() + verDirection[direction] * OffSet => this.getColumn() - verDirection[direction] * OffSet
AORS_1:30:java.util.ArrayList_legalMoves():direction++ => direction--
AORS_2:31:java.util.ArrayList_legalMoves():OffSet++ => OffSet--
AODU_1:28:java.util.ArrayList_legalMoves():-1 => 1
AODU_2:28:java.util.ArrayList_legalMoves():+1 => 1
AODU_3:29:java.util.ArrayList_legalMoves():-1 => 1
AODU_4:29:java.util.ArrayList_legalMoves():+1 => 1
AOIU_1:36:java.util.ArrayList_legalMoves():rowPos => -rowPos
AOIU_2:36:java.util.ArrayList_legalMoves():colPos => -colPos
AOIU_3:42:java.util.ArrayList_legalMoves():rowPos => -rowPos
AOIU_4:42:java.util.ArrayList_legalMoves():colPos => -colPos
AOIU_5:46:java.util.ArrayList_legalMoves():rowPos => -rowPos
AOIU_6:46:java.util.ArrayList_legalMoves():colPos => -colPos
AOIS_1:30:java.util.ArrayList_legalMoves():direction => ++direction
AOIS_2:30:java.util.ArrayList_legalMoves():direction => --direction
AOIS_3:30:java.util.ArrayList_legalMoves():direction => direction++
AOIS_4:30:java.util.ArrayList_legalMoves():direction => direction--
AOIS_5:31:java.util.ArrayList_legalMoves():OffSet => ++OffSet
AOIS_6:31:java.util.ArrayList_legalMoves():OffSet => --OffSet
AOIS_7:31:java.util.ArrayList_legalMoves():OffSet => OffSet++
AOIS_8:31:java.util.ArrayList_legalMoves():OffSet => OffSet--
AOIS_9:34:java.util.ArrayList_legalMoves():direction => ++direction
AOIS_10:34:java.util.ArrayList_legalMoves():direction => --direction
AOIS_11:34:java.util.ArrayList_legalMoves():direction => direction++
AOIS_12:34:java.util.ArrayList_legalMoves():direction => direction--
AOIS_13:34:java.util.ArrayList_legalMoves():OffSet => ++OffSet
AOIS_14:34:java.util.ArrayList_legalMoves():OffSet => --OffSet
AOIS_15:34:java.util.ArrayList_legalMoves():OffSet => OffSet++
AOIS_16:34:java.util.ArrayList_legalMoves():OffSet => OffSet--
AOIS_17:35:java.util.ArrayList_legalMoves():direction => ++direction
AOIS_18:35:java.util.ArrayList_legalMoves():direction => --direction
AOIS_19:35:java.util.ArrayList_legalMoves():direction => direction++
AOIS_20:35:java.util.ArrayList_legalMoves():direction => direction--
AOIS_21:35:java.util.ArrayList_legalMoves():OffSet => ++OffSet
AOIS_22:35:java.util.ArrayList_legalMoves():OffSet => --OffSet
AOIS_23:35:java.util.ArrayList_legalMoves():OffSet => OffSet++
AOIS_24:35:java.util.ArrayList_legalMoves():OffSet => OffSet--
AOIS_25:36:java.util.ArrayList_legalMoves():rowPos => ++rowPos
AOIS_26:36:java.util.ArrayList_legalMoves():rowPos => --rowPos
AOIS_27:36:java.util.ArrayList_legalMoves():rowPos => rowPos++
AOIS_28:36:java.util.ArrayList_legalMoves():rowPos => rowPos--
AOIS_29:36:java.util.ArrayList_legalMoves():colPos => ++colPos
AOIS_30:36:java.util.ArrayList_legalMoves():colPos => --colPos
AOIS_31:36:java.util.ArrayList_legalMoves():colPos => colPos++
AOIS_32:36:java.util.ArrayList_legalMoves():colPos => colPos--
AOIS_33:37:java.util.ArrayList_legalMoves():rowPos => ++rowPos
AOIS_34:37:java.util.ArrayList_legalMoves():rowPos => --rowPos
AOIS_35:37:java.util.ArrayList_legalMoves():rowPos => rowPos++
AOIS_36:37:java.util.ArrayList_legalMoves():rowPos => rowPos--
AOIS_37:37:java.util.ArrayList_legalMoves():colPos => ++colPos
AOIS_38:37:java.util.ArrayList_legalMoves():colPos => --colPos
AOIS_39:37:java.util.ArrayList_legalMoves():colPos => colPos++
AOIS_40:37:java.util.ArrayList_legalMoves():colPos => colPos--
AOIS_41:42:java.util.ArrayList_legalMoves():rowPos => rowPos++
AOIS_42:42:java.util.ArrayList_legalMoves():rowPos => rowPos--
AOIS_43:42:java.util.ArrayList_legalMoves():colPos => colPos++
AOIS_44:42:java.util.ArrayList_legalMoves():colPos => colPos--
AOIS_45:46:java.util.ArrayList_legalMoves():rowPos => rowPos++
AOIS_46:46:java.util.ArrayList_legalMoves():rowPos => rowPos--
AOIS_47:46:java.util.ArrayList_legalMoves():colPos => colPos++
AOIS_48:46:java.util.ArrayList_legalMoves():colPos => colPos--
ROR_1:17:java.lang.String_toString(): color == ChessPiece.Color.WHITE  =>   color != ChessPiece.Color.WHITE
ROR_2:30:java.util.ArrayList_legalMoves(): direction < 4  =>   direction > 4
ROR_3:30:java.util.ArrayList_legalMoves(): direction < 4  =>   direction >= 4
ROR_4:30:java.util.ArrayList_legalMoves(): direction < 4  =>   direction <= 4
ROR_5:30:java.util.ArrayList_legalMoves(): direction < 4  =>   direction == 4
ROR_6:30:java.util.ArrayList_legalMoves(): direction < 4  =>   direction != 4
ROR_7:30:java.util.ArrayList_legalMoves(): direction < 4  =>   true
ROR_8:30:java.util.ArrayList_legalMoves(): direction < 4  =>   false
ROR_9:31:java.util.ArrayList_legalMoves(): OffSet <= 7  =>   OffSet > 7
ROR_10:31:java.util.ArrayList_legalMoves(): OffSet <= 7  =>   OffSet >= 7
ROR_11:31:java.util.ArrayList_legalMoves(): OffSet <= 7  =>   OffSet < 7
ROR_12:31:java.util.ArrayList_legalMoves(): OffSet <= 7  =>   OffSet == 7
ROR_13:31:java.util.ArrayList_legalMoves(): OffSet <= 7  =>   OffSet != 7
ROR_14:31:java.util.ArrayList_legalMoves(): OffSet <= 7  =>   true
ROR_15:31:java.util.ArrayList_legalMoves(): OffSet <= 7  =>   false
ROR_16:37:java.util.ArrayList_legalMoves(): onePossibleMove( rowPos, colPos ) != null  =>   onePossibleMove( rowPos, colPos ) == null
ROR_17:38:java.util.ArrayList_legalMoves(): board.getPiece( position ) != null  =>   board.getPiece( position ) == null
COI_1:17:java.lang.String_toString(): color == ChessPiece.Color.WHITE  =>  !(color == ChessPiece.Color.WHITE)
COI_2:30:java.util.ArrayList_legalMoves(): direction < 4  =>  !(direction < 4)
COI_3:31:java.util.ArrayList_legalMoves(): OffSet <= 7  =>  !(OffSet <= 7)
COI_4:37:java.util.ArrayList_legalMoves(): onePossibleMove( rowPos, colPos ) != null  =>  !(onePossibleMove( rowPos, colPos ) != null)
COI_5:38:java.util.ArrayList_legalMoves(): board.getPiece( position ) != null  =>  !(board.getPiece( position ) != null)
LOI_1:30:java.util.ArrayList_legalMoves():direction => ~direction
LOI_2:30:java.util.ArrayList_legalMoves():direction => ~direction
LOI_3:31:java.util.ArrayList_legalMoves():OffSet => ~OffSet
LOI_4:31:java.util.ArrayList_legalMoves():OffSet => ~OffSet
LOI_5:34:java.util.ArrayList_legalMoves():direction => ~direction
LOI_6:34:java.util.ArrayList_legalMoves():OffSet => ~OffSet
LOI_7:35:java.util.ArrayList_legalMoves():direction => ~direction
LOI_8:35:java.util.ArrayList_legalMoves():OffSet => ~OffSet
LOI_9:36:java.util.ArrayList_legalMoves():rowPos => ~rowPos
LOI_10:36:java.util.ArrayList_legalMoves():colPos => ~colPos
LOI_11:37:java.util.ArrayList_legalMoves():rowPos => ~rowPos
LOI_12:37:java.util.ArrayList_legalMoves():colPos => ~colPos
LOI_13:42:java.util.ArrayList_legalMoves():rowPos => ~rowPos
LOI_14:42:java.util.ArrayList_legalMoves():colPos => ~colPos
LOI_15:46:java.util.ArrayList_legalMoves():rowPos => ~rowPos
LOI_16:46:java.util.ArrayList_legalMoves():colPos => ~colPos
SDL_1:17:java.lang.String_toString(): if (color == ChessPiece.Color.WHITE) {     return \"♖\"; } else {     return \"♜\"; }  =>  
SDL_2:22:java.lang.String_toString(): if (color == ChessPiece.Color.WHITE) {     return \"♖\"; } else {     return \"♜\"; }  =>   if (true) {     return \"♖\"; } else {     return \"♜\"; }
SDL_3:19:java.lang.String_toString(): return \"♖\";  =>   return \"\";
SDL_4:21:java.lang.String_toString(): return \"♜\";  =>   return \"\";
SDL_5:31:java.util.ArrayList_legalMoves(): java.util.ArrayList<String> returnList = new java.util.ArrayList<String>(); java.lang.String position; int[] horDirection = { -1, +1, 0, 0 }; int[] verDirection = { 0, 0, -1, +1 }; for (int direction = 0; direction < 4; direction++) {     for (int OffSet = 1; OffSet <= 7; OffSet++) {         int rowPos;         int colPos;         rowPos = this.getRow() + horDirection[direction] * OffSet;         colPos = this.getColumn() + verDirection[direction] * OffSet;         position = onePossibleMove( rowPos, colPos );         if (onePossibleMove( rowPos, colPos ) != null) {             if (board.getPiece( position ) != null) {                 if (board.getPiece( position ).getColor().equals( this.getColor() )) {                     break;                 } else {                     returnList.add( onePossibleMove( rowPos, colPos ) );                     break;                 }             } else {                 returnList.add( onePossibleMove( rowPos, colPos ) );             }         }     } } return returnList;  =>   java.util.ArrayList<String> returnList = new java.util.ArrayList<String>(); java.lang.String position; int[] horDirection = { -1, +1, 0, 0 }; int[] verDirection = { 0, 0, -1, +1 }; return returnList;
SDL_6:31:java.util.ArrayList_legalMoves(): for (int OffSet = 1; OffSet <= 7; OffSet++) {     int rowPos;     int colPos;     rowPos = this.getRow() + horDirection[direction] * OffSet;     colPos = this.getColumn() + verDirection[direction] * OffSet;     position = onePossibleMove( rowPos, colPos );     if (onePossibleMove( rowPos, colPos ) != null) {         if (board.getPiece( position ) != null) {             if (board.getPiece( position ).getColor().equals( this.getColor() )) {                 break;             } else {                 returnList.add( onePossibleMove( rowPos, colPos ) );                 break;             }         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );         }     } }  =>  
SDL_7:51:java.util.ArrayList_legalMoves(): for (int direction = 0; direction < 4; direction++) {     for (int OffSet = 1; OffSet <= 7; OffSet++) {         int rowPos;         int colPos;         rowPos = this.getRow() + horDirection[direction] * OffSet;         colPos = this.getColumn() + verDirection[direction] * OffSet;         position = onePossibleMove( rowPos, colPos );         if (onePossibleMove( rowPos, colPos ) != null) {             if (board.getPiece( position ) != null) {                 if (board.getPiece( position ).getColor().equals( this.getColor() )) {                     break;                 } else {                     returnList.add( onePossibleMove( rowPos, colPos ) );                     break;                 }             } else {                 returnList.add( onePossibleMove( rowPos, colPos ) );             }         }     } }  =>   for (int direction = 0;; direction++) {     for (int OffSet = 1; OffSet <= 7; OffSet++) {         int rowPos;         int colPos;         rowPos = this.getRow() + horDirection[direction] * OffSet;         colPos = this.getColumn() + verDirection[direction] * OffSet;         position = onePossibleMove( rowPos, colPos );         if (onePossibleMove( rowPos, colPos ) != null) {             if (board.getPiece( position ) != null) {                 if (board.getPiece( position ).getColor().equals( this.getColor() )) {                     break;                 } else {                     returnList.add( onePossibleMove( rowPos, colPos ) );                     break;                 }             } else {                 returnList.add( onePossibleMove( rowPos, colPos ) );             }         }     } }
SDL_8:51:java.util.ArrayList_legalMoves(): for (int direction = 0; direction < 4; direction++) {     for (int OffSet = 1; OffSet <= 7; OffSet++) {         int rowPos;         int colPos;         rowPos = this.getRow() + horDirection[direction] * OffSet;         colPos = this.getColumn() + verDirection[direction] * OffSet;         position = onePossibleMove( rowPos, colPos );         if (onePossibleMove( rowPos, colPos ) != null) {             if (board.getPiece( position ) != null) {                 if (board.getPiece( position ).getColor().equals( this.getColor() )) {                     break;                 } else {                     returnList.add( onePossibleMove( rowPos, colPos ) );                     break;                 }             } else {                 returnList.add( onePossibleMove( rowPos, colPos ) );             }         }     } }  =>   for (int direction = 0; direction < 4;) {     for (int OffSet = 1; OffSet <= 7; OffSet++) {         int rowPos;         int colPos;         rowPos = this.getRow() + horDirection[direction] * OffSet;         colPos = this.getColumn() + verDirection[direction] * OffSet;         position = onePossibleMove( rowPos, colPos );         if (onePossibleMove( rowPos, colPos ) != null) {             if (board.getPiece( position ) != null) {                 if (board.getPiece( position ).getColor().equals( this.getColor() )) {                     break;                 } else {                     returnList.add( onePossibleMove( rowPos, colPos ) );                     break;                 }             } else {                 returnList.add( onePossibleMove( rowPos, colPos ) );             }         }     } }
SDL_9:48:java.util.ArrayList_legalMoves(): int rowPos; int colPos; rowPos = this.getRow() + horDirection[direction] * OffSet; colPos = this.getColumn() + verDirection[direction] * OffSet; position = onePossibleMove( rowPos, colPos ); if (onePossibleMove( rowPos, colPos ) != null) {     if (board.getPiece( position ) != null) {         if (board.getPiece( position ).getColor().equals( this.getColor() )) {             break;         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );             break;         }     } else {         returnList.add( onePossibleMove( rowPos, colPos ) );     } }  =>   int rowPos; int colPos; colPos = this.getColumn() + verDirection[direction] * OffSet; position = onePossibleMove( rowPos, colPos ); if (onePossibleMove( rowPos, colPos ) != null) {     if (board.getPiece( position ) != null) {         if (board.getPiece( position ).getColor().equals( this.getColor() )) {             break;         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );             break;         }     } else {         returnList.add( onePossibleMove( rowPos, colPos ) );     } }
SDL_10:48:java.util.ArrayList_legalMoves(): int rowPos; int colPos; rowPos = this.getRow() + horDirection[direction] * OffSet; colPos = this.getColumn() + verDirection[direction] * OffSet; position = onePossibleMove( rowPos, colPos ); if (onePossibleMove( rowPos, colPos ) != null) {     if (board.getPiece( position ) != null) {         if (board.getPiece( position ).getColor().equals( this.getColor() )) {             break;         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );             break;         }     } else {         returnList.add( onePossibleMove( rowPos, colPos ) );     } }  =>   int rowPos; int colPos; rowPos = this.getRow() + horDirection[direction] * OffSet; position = onePossibleMove( rowPos, colPos ); if (onePossibleMove( rowPos, colPos ) != null) {     if (board.getPiece( position ) != null) {         if (board.getPiece( position ).getColor().equals( this.getColor() )) {             break;         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );             break;         }     } else {         returnList.add( onePossibleMove( rowPos, colPos ) );     } }
SDL_11:48:java.util.ArrayList_legalMoves(): int rowPos; int colPos; rowPos = this.getRow() + horDirection[direction] * OffSet; colPos = this.getColumn() + verDirection[direction] * OffSet; position = onePossibleMove( rowPos, colPos ); if (onePossibleMove( rowPos, colPos ) != null) {     if (board.getPiece( position ) != null) {         if (board.getPiece( position ).getColor().equals( this.getColor() )) {             break;         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );             break;         }     } else {         returnList.add( onePossibleMove( rowPos, colPos ) );     } }  =>   int rowPos; int colPos; rowPos = this.getRow() + horDirection[direction] * OffSet; colPos = this.getColumn() + verDirection[direction] * OffSet; if (onePossibleMove( rowPos, colPos ) != null) {     if (board.getPiece( position ) != null) {         if (board.getPiece( position ).getColor().equals( this.getColor() )) {             break;         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );             break;         }     } else {         returnList.add( onePossibleMove( rowPos, colPos ) );     } }
SDL_12:37:java.util.ArrayList_legalMoves(): int rowPos; int colPos; rowPos = this.getRow() + horDirection[direction] * OffSet; colPos = this.getColumn() + verDirection[direction] * OffSet; position = onePossibleMove( rowPos, colPos ); if (onePossibleMove( rowPos, colPos ) != null) {     if (board.getPiece( position ) != null) {         if (board.getPiece( position ).getColor().equals( this.getColor() )) {             break;         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );             break;         }     } else {         returnList.add( onePossibleMove( rowPos, colPos ) );     } }  =>   int rowPos; int colPos; rowPos = this.getRow() + horDirection[direction] * OffSet; colPos = this.getColumn() + verDirection[direction] * OffSet; position = onePossibleMove( rowPos, colPos );
SDL_13:50:java.util.ArrayList_legalMoves(): for (int OffSet = 1; OffSet <= 7; OffSet++) {     int rowPos;     int colPos;     rowPos = this.getRow() + horDirection[direction] * OffSet;     colPos = this.getColumn() + verDirection[direction] * OffSet;     position = onePossibleMove( rowPos, colPos );     if (onePossibleMove( rowPos, colPos ) != null) {         if (board.getPiece( position ) != null) {             if (board.getPiece( position ).getColor().equals( this.getColor() )) {                 break;             } else {                 returnList.add( onePossibleMove( rowPos, colPos ) );                 break;             }         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );         }     } }  =>   for (int OffSet = 1;; OffSet++) {     int rowPos;     int colPos;     rowPos = this.getRow() + horDirection[direction] * OffSet;     colPos = this.getColumn() + verDirection[direction] * OffSet;     position = onePossibleMove( rowPos, colPos );     if (onePossibleMove( rowPos, colPos ) != null) {         if (board.getPiece( position ) != null) {             if (board.getPiece( position ).getColor().equals( this.getColor() )) {                 break;             } else {                 returnList.add( onePossibleMove( rowPos, colPos ) );                 break;             }         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );         }     } }
SDL_14:50:java.util.ArrayList_legalMoves(): for (int OffSet = 1; OffSet <= 7; OffSet++) {     int rowPos;     int colPos;     rowPos = this.getRow() + horDirection[direction] * OffSet;     colPos = this.getColumn() + verDirection[direction] * OffSet;     position = onePossibleMove( rowPos, colPos );     if (onePossibleMove( rowPos, colPos ) != null) {         if (board.getPiece( position ) != null) {             if (board.getPiece( position ).getColor().equals( this.getColor() )) {                 break;             } else {                 returnList.add( onePossibleMove( rowPos, colPos ) );                 break;             }         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );         }     } }  =>   for (int OffSet = 1; OffSet <= 7;) {     int rowPos;     int colPos;     rowPos = this.getRow() + horDirection[direction] * OffSet;     colPos = this.getColumn() + verDirection[direction] * OffSet;     position = onePossibleMove( rowPos, colPos );     if (onePossibleMove( rowPos, colPos ) != null) {         if (board.getPiece( position ) != null) {             if (board.getPiece( position ).getColor().equals( this.getColor() )) {                 break;             } else {                 returnList.add( onePossibleMove( rowPos, colPos ) );                 break;             }         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );         }     } }
SDL_15:38:java.util.ArrayList_legalMoves(): if (board.getPiece( position ) != null) {     if (board.getPiece( position ).getColor().equals( this.getColor() )) {         break;     } else {         returnList.add( onePossibleMove( rowPos, colPos ) );         break;     } } else {     returnList.add( onePossibleMove( rowPos, colPos ) ); }  =>  
SDL_16:49:java.util.ArrayList_legalMoves(): if (onePossibleMove( rowPos, colPos ) != null) {     if (board.getPiece( position ) != null) {         if (board.getPiece( position ).getColor().equals( this.getColor() )) {             break;         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );             break;         }     } else {         returnList.add( onePossibleMove( rowPos, colPos ) );     } }  =>   if (true) {     if (board.getPiece( position ) != null) {         if (board.getPiece( position ).getColor().equals( this.getColor() )) {             break;         } else {             returnList.add( onePossibleMove( rowPos, colPos ) );             break;         }     } else {         returnList.add( onePossibleMove( rowPos, colPos ) );     } }
SDL_17:39:java.util.ArrayList_legalMoves(): if (board.getPiece( position ).getColor().equals( this.getColor() )) {     break; } else {     returnList.add( onePossibleMove( rowPos, colPos ) );     break; }  =>  
SDL_18:48:java.util.ArrayList_legalMoves(): if (board.getPiece( position ) != null) {     if (board.getPiece( position ).getColor().equals( this.getColor() )) {         break;     } else {         returnList.add( onePossibleMove( rowPos, colPos ) );         break;     } } else {     returnList.add( onePossibleMove( rowPos, colPos ) ); }  =>   if (true) {     if (board.getPiece( position ).getColor().equals( this.getColor() )) {         break;     } else {         returnList.add( onePossibleMove( rowPos, colPos ) );         break;     } } else {     returnList.add( onePossibleMove( rowPos, colPos ) ); }
SDL_19:46:java.util.ArrayList_legalMoves(): returnList.add( onePossibleMove( rowPos, colPos ) );  =>  
SDL_20:40:java.util.ArrayList_legalMoves(): break;  =>  
SDL_21:45:java.util.ArrayList_legalMoves(): if (board.getPiece( position ).getColor().equals( this.getColor() )) {     break; } else {     returnList.add( onePossibleMove( rowPos, colPos ) );     break; }  =>   if (true) {     break; } else {     returnList.add( onePossibleMove( rowPos, colPos ) );     break; }
SDL_22:43:java.util.ArrayList_legalMoves(): returnList.add( onePossibleMove( rowPos, colPos ) ); break;  =>   break;
SDL_23:43:java.util.ArrayList_legalMoves(): returnList.add( onePossibleMove( rowPos, colPos ) ); break;  =>   returnList.add( onePossibleMove( rowPos, colPos ) );
VDL_1:17:java.lang.String_toString():color == ChessPiece.Color.WHITE => ChessPiece.Color.WHITE
VDL_2:30:java.util.ArrayList_legalMoves():direction < 4 => 4
VDL_3:30:java.util.ArrayList_legalMoves():direction++ =>  
VDL_4:31:java.util.ArrayList_legalMoves():OffSet <= 7 => 7
VDL_5:31:java.util.ArrayList_legalMoves():OffSet++ =>  
VDL_6:34:java.util.ArrayList_legalMoves():horDirection[direction] * OffSet => OffSet
VDL_7:34:java.util.ArrayList_legalMoves():horDirection[direction] * OffSet => horDirection[direction]
VDL_8:35:java.util.ArrayList_legalMoves():verDirection[direction] * OffSet => OffSet
VDL_9:35:java.util.ArrayList_legalMoves():verDirection[direction] * OffSet => verDirection[direction]
ODL_1:17:java.lang.String_toString():color == ChessPiece.Color.WHITE => color
ODL_2:17:java.lang.String_toString():color == ChessPiece.Color.WHITE => ChessPiece.Color.WHITE
ODL_3:28:java.util.ArrayList_legalMoves():-1 => 1
ODL_4:28:java.util.ArrayList_legalMoves():+1 => 1
ODL_5:29:java.util.ArrayList_legalMoves():-1 => 1
ODL_6:29:java.util.ArrayList_legalMoves():+1 => 1
ODL_7:30:java.util.ArrayList_legalMoves():direction < 4 => direction
ODL_8:30:java.util.ArrayList_legalMoves():direction < 4 => 4
ODL_9:30:java.util.ArrayList_legalMoves():direction++ => direction
ODL_10:31:java.util.ArrayList_legalMoves():OffSet <= 7 => OffSet
ODL_11:31:java.util.ArrayList_legalMoves():OffSet <= 7 => 7
ODL_12:31:java.util.ArrayList_legalMoves():OffSet++ => OffSet
ODL_13:34:java.util.ArrayList_legalMoves():horDirection[direction] * OffSet => horDirection[direction]
ODL_14:34:java.util.ArrayList_legalMoves():horDirection[direction] * OffSet => OffSet
ODL_15:34:java.util.ArrayList_legalMoves():this.getRow() + horDirection[direction] * OffSet => this.getRow()
ODL_16:34:java.util.ArrayList_legalMoves():this.getRow() + horDirection[direction] * OffSet => horDirection[direction] * OffSet
ODL_17:35:java.util.ArrayList_legalMoves():verDirection[direction] * OffSet => verDirection[direction]
ODL_18:35:java.util.ArrayList_legalMoves():verDirection[direction] * OffSet => OffSet
ODL_19:35:java.util.ArrayList_legalMoves():this.getColumn() + verDirection[direction] * OffSet => this.getColumn()
ODL_20:35:java.util.ArrayList_legalMoves():this.getColumn() + verDirection[direction] * OffSet => verDirection[direction] * OffSet
ODL_21:37:java.util.ArrayList_legalMoves():onePossibleMove( rowPos, colPos ) != null => onePossibleMove( rowPos, colPos )
ODL_22:37:java.util.ArrayList_legalMoves():onePossibleMove( rowPos, colPos ) != null => null
ODL_23:38:java.util.ArrayList_legalMoves():board.getPiece( position ) != null => board.getPiece( position )
ODL_24:38:java.util.ArrayList_legalMoves():board.getPiece( position ) != null => null
CDL_1:28:java.util.ArrayList_legalMoves():-1 =>  
CDL_2:28:java.util.ArrayList_legalMoves():+1 =>  
CDL_3:29:java.util.ArrayList_legalMoves():-1 =>  
CDL_4:29:java.util.ArrayList_legalMoves():+1 =>  
CDL_5:30:java.util.ArrayList_legalMoves():direction < 4 => direction
CDL_6:31:java.util.ArrayList_legalMoves():OffSet <= 7 => OffSet
CDL_7:37:java.util.ArrayList_legalMoves():onePossibleMove( rowPos, colPos ) != null => onePossibleMove( rowPos, colPos )
CDL_8:38:java.util.ArrayList_legalMoves():board.getPiece( position ) != null => board.getPiece( position )
